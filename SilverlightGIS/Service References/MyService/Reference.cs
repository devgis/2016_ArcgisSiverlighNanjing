//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace SilverlightGIS.MyService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Info", Namespace="http://schemas.datacontract.org/2004/07/SilverlightGIS.Common")]
    public partial class Info : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AuthorField;
        
        private string ContentField;
        
        private string IDField;
        
        private System.DateTime TimeField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderInfo", Namespace="http://schemas.datacontract.org/2004/07/SilverlightGIS.Common")]
    public partial class OrderInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EndField;
        
        private string IDField;
        
        private System.DateTime OrderTimeField;
        
        private string PsgNameField;
        
        private string StartField;
        
        private string TrainNOField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string End {
            get {
                return this.EndField;
            }
            set {
                if ((object.ReferenceEquals(this.EndField, value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OrderTime {
            get {
                return this.OrderTimeField;
            }
            set {
                if ((this.OrderTimeField.Equals(value) != true)) {
                    this.OrderTimeField = value;
                    this.RaisePropertyChanged("OrderTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PsgName {
            get {
                return this.PsgNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PsgNameField, value) != true)) {
                    this.PsgNameField = value;
                    this.RaisePropertyChanged("PsgName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Start {
            get {
                return this.StartField;
            }
            set {
                if ((object.ReferenceEquals(this.StartField, value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TrainNO {
            get {
                return this.TrainNOField;
            }
            set {
                if ((object.ReferenceEquals(this.TrainNOField, value) != true)) {
                    this.TrainNOField = value;
                    this.RaisePropertyChanged("TrainNO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyService.IDBService")]
    public interface IDBService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/GetInfoList", ReplyAction="http://tempuri.org/IDBService/GetInfoListResponse")]
        System.IAsyncResult BeginGetInfoList(string Where, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info> EndGetInfoList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/AddInfo", ReplyAction="http://tempuri.org/IDBService/AddInfoResponse")]
        System.IAsyncResult BeginAddInfo(SilverlightGIS.MyService.Info info, System.AsyncCallback callback, object asyncState);
        
        bool EndAddInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/EditInfo", ReplyAction="http://tempuri.org/IDBService/EditInfoResponse")]
        System.IAsyncResult BeginEditInfo(SilverlightGIS.MyService.Info info, System.AsyncCallback callback, object asyncState);
        
        bool EndEditInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/DeleteInfo", ReplyAction="http://tempuri.org/IDBService/DeleteInfoResponse")]
        System.IAsyncResult BeginDeleteInfo(string ID, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/GetOrderList", ReplyAction="http://tempuri.org/IDBService/GetOrderListResponse")]
        System.IAsyncResult BeginGetOrderList(string Where, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.OrderInfo> EndGetOrderList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/AddOrderInfo", ReplyAction="http://tempuri.org/IDBService/AddOrderInfoResponse")]
        System.IAsyncResult BeginAddOrderInfo(SilverlightGIS.MyService.OrderInfo orderInfo, System.AsyncCallback callback, object asyncState);
        
        bool EndAddOrderInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/EditOrderInfo", ReplyAction="http://tempuri.org/IDBService/EditOrderInfoResponse")]
        System.IAsyncResult BeginEditOrderInfo(SilverlightGIS.MyService.OrderInfo orderInfo, System.AsyncCallback callback, object asyncState);
        
        bool EndEditOrderInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/DeleteOrderInfo", ReplyAction="http://tempuri.org/IDBService/DeleteOrderInfoResponse")]
        System.IAsyncResult BeginDeleteOrderInfo(string ID, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteOrderInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/AddUser", ReplyAction="http://tempuri.org/IDBService/AddUserResponse")]
        System.IAsyncResult BeginAddUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState);
        
        bool EndAddUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/EditUser", ReplyAction="http://tempuri.org/IDBService/EditUserResponse")]
        System.IAsyncResult BeginEditUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState);
        
        bool EndEditUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/CheckUser", ReplyAction="http://tempuri.org/IDBService/CheckUserResponse")]
        System.IAsyncResult BeginCheckUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/UserExists", ReplyAction="http://tempuri.org/IDBService/UserExistsResponse")]
        System.IAsyncResult BeginUserExists(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState);
        
        bool EndUserExists(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDBServiceChannel : SilverlightGIS.MyService.IDBService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOrderListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOrderListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.OrderInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.OrderInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddOrderInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddOrderInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditOrderInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditOrderInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteOrderInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteOrderInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UserExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBServiceClient : System.ServiceModel.ClientBase<SilverlightGIS.MyService.IDBService>, SilverlightGIS.MyService.IDBService {
        
        private BeginOperationDelegate onBeginGetInfoListDelegate;
        
        private EndOperationDelegate onEndGetInfoListDelegate;
        
        private System.Threading.SendOrPostCallback onGetInfoListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddInfoDelegate;
        
        private EndOperationDelegate onEndAddInfoDelegate;
        
        private System.Threading.SendOrPostCallback onAddInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditInfoDelegate;
        
        private EndOperationDelegate onEndEditInfoDelegate;
        
        private System.Threading.SendOrPostCallback onEditInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteInfoDelegate;
        
        private EndOperationDelegate onEndDeleteInfoDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOrderListDelegate;
        
        private EndOperationDelegate onEndGetOrderListDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrderListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddOrderInfoDelegate;
        
        private EndOperationDelegate onEndAddOrderInfoDelegate;
        
        private System.Threading.SendOrPostCallback onAddOrderInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditOrderInfoDelegate;
        
        private EndOperationDelegate onEndEditOrderInfoDelegate;
        
        private System.Threading.SendOrPostCallback onEditOrderInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteOrderInfoDelegate;
        
        private EndOperationDelegate onEndDeleteOrderInfoDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteOrderInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserDelegate;
        
        private EndOperationDelegate onEndAddUserDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditUserDelegate;
        
        private EndOperationDelegate onEndEditUserDelegate;
        
        private System.Threading.SendOrPostCallback onEditUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckUserDelegate;
        
        private EndOperationDelegate onEndCheckUserDelegate;
        
        private System.Threading.SendOrPostCallback onCheckUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUserExistsDelegate;
        
        private EndOperationDelegate onEndUserExistsDelegate;
        
        private System.Threading.SendOrPostCallback onUserExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DBServiceClient() {
        }
        
        public DBServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DBServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetInfoListCompletedEventArgs> GetInfoListCompleted;
        
        public event System.EventHandler<AddInfoCompletedEventArgs> AddInfoCompleted;
        
        public event System.EventHandler<EditInfoCompletedEventArgs> EditInfoCompleted;
        
        public event System.EventHandler<DeleteInfoCompletedEventArgs> DeleteInfoCompleted;
        
        public event System.EventHandler<GetOrderListCompletedEventArgs> GetOrderListCompleted;
        
        public event System.EventHandler<AddOrderInfoCompletedEventArgs> AddOrderInfoCompleted;
        
        public event System.EventHandler<EditOrderInfoCompletedEventArgs> EditOrderInfoCompleted;
        
        public event System.EventHandler<DeleteOrderInfoCompletedEventArgs> DeleteOrderInfoCompleted;
        
        public event System.EventHandler<AddUserCompletedEventArgs> AddUserCompleted;
        
        public event System.EventHandler<EditUserCompletedEventArgs> EditUserCompleted;
        
        public event System.EventHandler<CheckUserCompletedEventArgs> CheckUserCompleted;
        
        public event System.EventHandler<UserExistsCompletedEventArgs> UserExistsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginGetInfoList(string Where, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInfoList(Where, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info> SilverlightGIS.MyService.IDBService.EndGetInfoList(System.IAsyncResult result) {
            return base.Channel.EndGetInfoList(result);
        }
        
        private System.IAsyncResult OnBeginGetInfoList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Where = ((string)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginGetInfoList(Where, callback, asyncState);
        }
        
        private object[] OnEndGetInfoList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info> retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndGetInfoList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInfoListCompleted(object state) {
            if ((this.GetInfoListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInfoListCompleted(this, new GetInfoListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInfoListAsync(string Where) {
            this.GetInfoListAsync(Where, null);
        }
        
        public void GetInfoListAsync(string Where, object userState) {
            if ((this.onBeginGetInfoListDelegate == null)) {
                this.onBeginGetInfoListDelegate = new BeginOperationDelegate(this.OnBeginGetInfoList);
            }
            if ((this.onEndGetInfoListDelegate == null)) {
                this.onEndGetInfoListDelegate = new EndOperationDelegate(this.OnEndGetInfoList);
            }
            if ((this.onGetInfoListCompletedDelegate == null)) {
                this.onGetInfoListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInfoListCompleted);
            }
            base.InvokeAsync(this.onBeginGetInfoListDelegate, new object[] {
                        Where}, this.onEndGetInfoListDelegate, this.onGetInfoListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginAddInfo(SilverlightGIS.MyService.Info info, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddInfo(info, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndAddInfo(System.IAsyncResult result) {
            return base.Channel.EndAddInfo(result);
        }
        
        private System.IAsyncResult OnBeginAddInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightGIS.MyService.Info info = ((SilverlightGIS.MyService.Info)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginAddInfo(info, callback, asyncState);
        }
        
        private object[] OnEndAddInfo(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndAddInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddInfoCompleted(object state) {
            if ((this.AddInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddInfoCompleted(this, new AddInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddInfoAsync(SilverlightGIS.MyService.Info info) {
            this.AddInfoAsync(info, null);
        }
        
        public void AddInfoAsync(SilverlightGIS.MyService.Info info, object userState) {
            if ((this.onBeginAddInfoDelegate == null)) {
                this.onBeginAddInfoDelegate = new BeginOperationDelegate(this.OnBeginAddInfo);
            }
            if ((this.onEndAddInfoDelegate == null)) {
                this.onEndAddInfoDelegate = new EndOperationDelegate(this.OnEndAddInfo);
            }
            if ((this.onAddInfoCompletedDelegate == null)) {
                this.onAddInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddInfoCompleted);
            }
            base.InvokeAsync(this.onBeginAddInfoDelegate, new object[] {
                        info}, this.onEndAddInfoDelegate, this.onAddInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginEditInfo(SilverlightGIS.MyService.Info info, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditInfo(info, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndEditInfo(System.IAsyncResult result) {
            return base.Channel.EndEditInfo(result);
        }
        
        private System.IAsyncResult OnBeginEditInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightGIS.MyService.Info info = ((SilverlightGIS.MyService.Info)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginEditInfo(info, callback, asyncState);
        }
        
        private object[] OnEndEditInfo(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndEditInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditInfoCompleted(object state) {
            if ((this.EditInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditInfoCompleted(this, new EditInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditInfoAsync(SilverlightGIS.MyService.Info info) {
            this.EditInfoAsync(info, null);
        }
        
        public void EditInfoAsync(SilverlightGIS.MyService.Info info, object userState) {
            if ((this.onBeginEditInfoDelegate == null)) {
                this.onBeginEditInfoDelegate = new BeginOperationDelegate(this.OnBeginEditInfo);
            }
            if ((this.onEndEditInfoDelegate == null)) {
                this.onEndEditInfoDelegate = new EndOperationDelegate(this.OnEndEditInfo);
            }
            if ((this.onEditInfoCompletedDelegate == null)) {
                this.onEditInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditInfoCompleted);
            }
            base.InvokeAsync(this.onBeginEditInfoDelegate, new object[] {
                        info}, this.onEndEditInfoDelegate, this.onEditInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginDeleteInfo(string ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteInfo(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndDeleteInfo(System.IAsyncResult result) {
            return base.Channel.EndDeleteInfo(result);
        }
        
        private System.IAsyncResult OnBeginDeleteInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginDeleteInfo(ID, callback, asyncState);
        }
        
        private object[] OnEndDeleteInfo(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndDeleteInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteInfoCompleted(object state) {
            if ((this.DeleteInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteInfoCompleted(this, new DeleteInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteInfoAsync(string ID) {
            this.DeleteInfoAsync(ID, null);
        }
        
        public void DeleteInfoAsync(string ID, object userState) {
            if ((this.onBeginDeleteInfoDelegate == null)) {
                this.onBeginDeleteInfoDelegate = new BeginOperationDelegate(this.OnBeginDeleteInfo);
            }
            if ((this.onEndDeleteInfoDelegate == null)) {
                this.onEndDeleteInfoDelegate = new EndOperationDelegate(this.OnEndDeleteInfo);
            }
            if ((this.onDeleteInfoCompletedDelegate == null)) {
                this.onDeleteInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteInfoCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteInfoDelegate, new object[] {
                        ID}, this.onEndDeleteInfoDelegate, this.onDeleteInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginGetOrderList(string Where, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrderList(Where, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.OrderInfo> SilverlightGIS.MyService.IDBService.EndGetOrderList(System.IAsyncResult result) {
            return base.Channel.EndGetOrderList(result);
        }
        
        private System.IAsyncResult OnBeginGetOrderList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Where = ((string)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginGetOrderList(Where, callback, asyncState);
        }
        
        private object[] OnEndGetOrderList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.OrderInfo> retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndGetOrderList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOrderListCompleted(object state) {
            if ((this.GetOrderListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrderListCompleted(this, new GetOrderListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrderListAsync(string Where) {
            this.GetOrderListAsync(Where, null);
        }
        
        public void GetOrderListAsync(string Where, object userState) {
            if ((this.onBeginGetOrderListDelegate == null)) {
                this.onBeginGetOrderListDelegate = new BeginOperationDelegate(this.OnBeginGetOrderList);
            }
            if ((this.onEndGetOrderListDelegate == null)) {
                this.onEndGetOrderListDelegate = new EndOperationDelegate(this.OnEndGetOrderList);
            }
            if ((this.onGetOrderListCompletedDelegate == null)) {
                this.onGetOrderListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrderListCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrderListDelegate, new object[] {
                        Where}, this.onEndGetOrderListDelegate, this.onGetOrderListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginAddOrderInfo(SilverlightGIS.MyService.OrderInfo orderInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddOrderInfo(orderInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndAddOrderInfo(System.IAsyncResult result) {
            return base.Channel.EndAddOrderInfo(result);
        }
        
        private System.IAsyncResult OnBeginAddOrderInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightGIS.MyService.OrderInfo orderInfo = ((SilverlightGIS.MyService.OrderInfo)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginAddOrderInfo(orderInfo, callback, asyncState);
        }
        
        private object[] OnEndAddOrderInfo(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndAddOrderInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddOrderInfoCompleted(object state) {
            if ((this.AddOrderInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddOrderInfoCompleted(this, new AddOrderInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddOrderInfoAsync(SilverlightGIS.MyService.OrderInfo orderInfo) {
            this.AddOrderInfoAsync(orderInfo, null);
        }
        
        public void AddOrderInfoAsync(SilverlightGIS.MyService.OrderInfo orderInfo, object userState) {
            if ((this.onBeginAddOrderInfoDelegate == null)) {
                this.onBeginAddOrderInfoDelegate = new BeginOperationDelegate(this.OnBeginAddOrderInfo);
            }
            if ((this.onEndAddOrderInfoDelegate == null)) {
                this.onEndAddOrderInfoDelegate = new EndOperationDelegate(this.OnEndAddOrderInfo);
            }
            if ((this.onAddOrderInfoCompletedDelegate == null)) {
                this.onAddOrderInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddOrderInfoCompleted);
            }
            base.InvokeAsync(this.onBeginAddOrderInfoDelegate, new object[] {
                        orderInfo}, this.onEndAddOrderInfoDelegate, this.onAddOrderInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginEditOrderInfo(SilverlightGIS.MyService.OrderInfo orderInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditOrderInfo(orderInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndEditOrderInfo(System.IAsyncResult result) {
            return base.Channel.EndEditOrderInfo(result);
        }
        
        private System.IAsyncResult OnBeginEditOrderInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightGIS.MyService.OrderInfo orderInfo = ((SilverlightGIS.MyService.OrderInfo)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginEditOrderInfo(orderInfo, callback, asyncState);
        }
        
        private object[] OnEndEditOrderInfo(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndEditOrderInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditOrderInfoCompleted(object state) {
            if ((this.EditOrderInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditOrderInfoCompleted(this, new EditOrderInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditOrderInfoAsync(SilverlightGIS.MyService.OrderInfo orderInfo) {
            this.EditOrderInfoAsync(orderInfo, null);
        }
        
        public void EditOrderInfoAsync(SilverlightGIS.MyService.OrderInfo orderInfo, object userState) {
            if ((this.onBeginEditOrderInfoDelegate == null)) {
                this.onBeginEditOrderInfoDelegate = new BeginOperationDelegate(this.OnBeginEditOrderInfo);
            }
            if ((this.onEndEditOrderInfoDelegate == null)) {
                this.onEndEditOrderInfoDelegate = new EndOperationDelegate(this.OnEndEditOrderInfo);
            }
            if ((this.onEditOrderInfoCompletedDelegate == null)) {
                this.onEditOrderInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditOrderInfoCompleted);
            }
            base.InvokeAsync(this.onBeginEditOrderInfoDelegate, new object[] {
                        orderInfo}, this.onEndEditOrderInfoDelegate, this.onEditOrderInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginDeleteOrderInfo(string ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteOrderInfo(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndDeleteOrderInfo(System.IAsyncResult result) {
            return base.Channel.EndDeleteOrderInfo(result);
        }
        
        private System.IAsyncResult OnBeginDeleteOrderInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginDeleteOrderInfo(ID, callback, asyncState);
        }
        
        private object[] OnEndDeleteOrderInfo(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndDeleteOrderInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteOrderInfoCompleted(object state) {
            if ((this.DeleteOrderInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteOrderInfoCompleted(this, new DeleteOrderInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteOrderInfoAsync(string ID) {
            this.DeleteOrderInfoAsync(ID, null);
        }
        
        public void DeleteOrderInfoAsync(string ID, object userState) {
            if ((this.onBeginDeleteOrderInfoDelegate == null)) {
                this.onBeginDeleteOrderInfoDelegate = new BeginOperationDelegate(this.OnBeginDeleteOrderInfo);
            }
            if ((this.onEndDeleteOrderInfoDelegate == null)) {
                this.onEndDeleteOrderInfoDelegate = new EndOperationDelegate(this.OnEndDeleteOrderInfo);
            }
            if ((this.onDeleteOrderInfoCompletedDelegate == null)) {
                this.onDeleteOrderInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteOrderInfoCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteOrderInfoDelegate, new object[] {
                        ID}, this.onEndDeleteOrderInfoDelegate, this.onDeleteOrderInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginAddUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUser(UserName, UserPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndAddUser(System.IAsyncResult result) {
            return base.Channel.EndAddUser(result);
        }
        
        private System.IAsyncResult OnBeginAddUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserName = ((string)(inValues[0]));
            string UserPassword = ((string)(inValues[1]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginAddUser(UserName, UserPassword, callback, asyncState);
        }
        
        private object[] OnEndAddUser(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndAddUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddUserCompleted(object state) {
            if ((this.AddUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserCompleted(this, new AddUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserAsync(string UserName, string UserPassword) {
            this.AddUserAsync(UserName, UserPassword, null);
        }
        
        public void AddUserAsync(string UserName, string UserPassword, object userState) {
            if ((this.onBeginAddUserDelegate == null)) {
                this.onBeginAddUserDelegate = new BeginOperationDelegate(this.OnBeginAddUser);
            }
            if ((this.onEndAddUserDelegate == null)) {
                this.onEndAddUserDelegate = new EndOperationDelegate(this.OnEndAddUser);
            }
            if ((this.onAddUserCompletedDelegate == null)) {
                this.onAddUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserDelegate, new object[] {
                        UserName,
                        UserPassword}, this.onEndAddUserDelegate, this.onAddUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginEditUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditUser(UserName, UserPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndEditUser(System.IAsyncResult result) {
            return base.Channel.EndEditUser(result);
        }
        
        private System.IAsyncResult OnBeginEditUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserName = ((string)(inValues[0]));
            string UserPassword = ((string)(inValues[1]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginEditUser(UserName, UserPassword, callback, asyncState);
        }
        
        private object[] OnEndEditUser(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndEditUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditUserCompleted(object state) {
            if ((this.EditUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditUserCompleted(this, new EditUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditUserAsync(string UserName, string UserPassword) {
            this.EditUserAsync(UserName, UserPassword, null);
        }
        
        public void EditUserAsync(string UserName, string UserPassword, object userState) {
            if ((this.onBeginEditUserDelegate == null)) {
                this.onBeginEditUserDelegate = new BeginOperationDelegate(this.OnBeginEditUser);
            }
            if ((this.onEndEditUserDelegate == null)) {
                this.onEndEditUserDelegate = new EndOperationDelegate(this.OnEndEditUser);
            }
            if ((this.onEditUserCompletedDelegate == null)) {
                this.onEditUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditUserCompleted);
            }
            base.InvokeAsync(this.onBeginEditUserDelegate, new object[] {
                        UserName,
                        UserPassword}, this.onEndEditUserDelegate, this.onEditUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginCheckUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckUser(UserName, UserPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndCheckUser(System.IAsyncResult result) {
            return base.Channel.EndCheckUser(result);
        }
        
        private System.IAsyncResult OnBeginCheckUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserName = ((string)(inValues[0]));
            string UserPassword = ((string)(inValues[1]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginCheckUser(UserName, UserPassword, callback, asyncState);
        }
        
        private object[] OnEndCheckUser(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndCheckUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckUserCompleted(object state) {
            if ((this.CheckUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckUserCompleted(this, new CheckUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckUserAsync(string UserName, string UserPassword) {
            this.CheckUserAsync(UserName, UserPassword, null);
        }
        
        public void CheckUserAsync(string UserName, string UserPassword, object userState) {
            if ((this.onBeginCheckUserDelegate == null)) {
                this.onBeginCheckUserDelegate = new BeginOperationDelegate(this.OnBeginCheckUser);
            }
            if ((this.onEndCheckUserDelegate == null)) {
                this.onEndCheckUserDelegate = new EndOperationDelegate(this.OnEndCheckUser);
            }
            if ((this.onCheckUserCompletedDelegate == null)) {
                this.onCheckUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckUserCompleted);
            }
            base.InvokeAsync(this.onBeginCheckUserDelegate, new object[] {
                        UserName,
                        UserPassword}, this.onEndCheckUserDelegate, this.onCheckUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginUserExists(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserExists(UserName, UserPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndUserExists(System.IAsyncResult result) {
            return base.Channel.EndUserExists(result);
        }
        
        private System.IAsyncResult OnBeginUserExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserName = ((string)(inValues[0]));
            string UserPassword = ((string)(inValues[1]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginUserExists(UserName, UserPassword, callback, asyncState);
        }
        
        private object[] OnEndUserExists(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndUserExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUserExistsCompleted(object state) {
            if ((this.UserExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserExistsCompleted(this, new UserExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserExistsAsync(string UserName, string UserPassword) {
            this.UserExistsAsync(UserName, UserPassword, null);
        }
        
        public void UserExistsAsync(string UserName, string UserPassword, object userState) {
            if ((this.onBeginUserExistsDelegate == null)) {
                this.onBeginUserExistsDelegate = new BeginOperationDelegate(this.OnBeginUserExists);
            }
            if ((this.onEndUserExistsDelegate == null)) {
                this.onEndUserExistsDelegate = new EndOperationDelegate(this.OnEndUserExists);
            }
            if ((this.onUserExistsCompletedDelegate == null)) {
                this.onUserExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserExistsCompleted);
            }
            base.InvokeAsync(this.onBeginUserExistsDelegate, new object[] {
                        UserName,
                        UserPassword}, this.onEndUserExistsDelegate, this.onUserExistsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightGIS.MyService.IDBService CreateChannel() {
            return new DBServiceClientChannel(this);
        }
        
        private class DBServiceClientChannel : ChannelBase<SilverlightGIS.MyService.IDBService>, SilverlightGIS.MyService.IDBService {
            
            public DBServiceClientChannel(System.ServiceModel.ClientBase<SilverlightGIS.MyService.IDBService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetInfoList(string Where, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Where;
                System.IAsyncResult _result = base.BeginInvoke("GetInfoList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info> EndGetInfoList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info>)(base.EndInvoke("GetInfoList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddInfo(SilverlightGIS.MyService.Info info, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = info;
                System.IAsyncResult _result = base.BeginInvoke("AddInfo", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditInfo(SilverlightGIS.MyService.Info info, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = info;
                System.IAsyncResult _result = base.BeginInvoke("EditInfo", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndEditInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("EditInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteInfo(string ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteInfo", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOrderList(string Where, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Where;
                System.IAsyncResult _result = base.BeginInvoke("GetOrderList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.OrderInfo> EndGetOrderList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.OrderInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.OrderInfo>)(base.EndInvoke("GetOrderList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddOrderInfo(SilverlightGIS.MyService.OrderInfo orderInfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = orderInfo;
                System.IAsyncResult _result = base.BeginInvoke("AddOrderInfo", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddOrderInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddOrderInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditOrderInfo(SilverlightGIS.MyService.OrderInfo orderInfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = orderInfo;
                System.IAsyncResult _result = base.BeginInvoke("EditOrderInfo", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndEditOrderInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("EditOrderInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteOrderInfo(string ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteOrderInfo", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteOrderInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteOrderInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = UserName;
                _args[1] = UserPassword;
                System.IAsyncResult _result = base.BeginInvoke("AddUser", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = UserName;
                _args[1] = UserPassword;
                System.IAsyncResult _result = base.BeginInvoke("EditUser", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndEditUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("EditUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCheckUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = UserName;
                _args[1] = UserPassword;
                System.IAsyncResult _result = base.BeginInvoke("CheckUser", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndCheckUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("CheckUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUserExists(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = UserName;
                _args[1] = UserPassword;
                System.IAsyncResult _result = base.BeginInvoke("UserExists", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUserExists(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UserExists", _args, result)));
                return _result;
            }
        }
    }
}
